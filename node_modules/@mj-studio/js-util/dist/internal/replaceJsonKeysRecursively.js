import is from './is';
import isPlainObject from './isPlainObject';
function isArray(objOrArray) {
    return Array.isArray(objOrArray);
}
/**
 * replace all json keys recursively
 */
export default function replaceJsonKeysRecursively(objOrArr, options) {
    if (!objOrArr) {
        return objOrArr;
    }
    if (!isArray(objOrArr) && !isPlainObject(objOrArr)) {
        return objOrArr;
    }
    if (isArray(objOrArr)) {
        return objOrArr.map((v) => replaceJsonKeysRecursively(v, options));
    }
    else {
        const result = {};
        Object.entries(objOrArr).forEach(([key, value]) => {
            let newKey = key;
            if (options.replacer) {
                if (typeof options.replacer === 'function') {
                    const fnResult = options.replacer(key);
                    if (is.string(fnResult)) {
                        newKey = fnResult;
                    }
                }
                else if (key in options.replacer) {
                    newKey = options.replacer[key];
                }
            }
            result[newKey] = isPlainObject(value)
                ? replaceJsonKeysRecursively(value, options)
                : isArray(value)
                    ? value.map((v) => replaceJsonKeysRecursively(v, options))
                    : value;
            if (options.stripUndefined && typeof result[key] === 'undefined') {
                delete result[key];
            }
        });
        return result;
    }
}
//# sourceMappingURL=replaceJsonKeysRecursively.js.map