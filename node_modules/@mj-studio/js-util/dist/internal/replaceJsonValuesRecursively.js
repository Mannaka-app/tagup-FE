import isPlainObject from './isPlainObject';
function isArray(objOrArray) {
    return Array.isArray(objOrArray);
}
/**
 * replace all json value matches with key selector
 */
export default function replaceJsonValuesRecursively(objOrArr, options) {
    if (!objOrArr) {
        return objOrArr;
    }
    if (!isArray(objOrArr) && !isPlainObject(objOrArr)) {
        return objOrArr;
    }
    if (isArray(objOrArr)) {
        return objOrArr.map((v) => replaceJsonValuesRecursively(v, options));
    }
    else {
        const result = {};
        Object.entries(objOrArr).forEach(([key, value]) => {
            if (options.replacer && options.replacer[key]) {
                if (typeof options.replacer[key] === 'function') {
                    result[key] = options.replacer[key](value);
                }
                else {
                    result[key] = options.replacer[key];
                }
            }
            else {
                if (isPlainObject(value)) {
                    value = replaceJsonValuesRecursively(value, options);
                }
                else if (isArray(value)) {
                    value = value.map((v) => replaceJsonValuesRecursively(v, options));
                }
                result[key] = value;
            }
            let stripped = false;
            if (options.stripUndefined && typeof result[key] === 'undefined') {
                delete result[key];
                stripped = true;
            }
            if (!isArray(result[key]) &&
                !isPlainObject(result[key]) &&
                !stripped &&
                options.postLeafTransform) {
                result[key] = options.postLeafTransform(result[key]);
            }
        });
        return result;
    }
}
//# sourceMappingURL=replaceJsonValuesRecursively.js.map