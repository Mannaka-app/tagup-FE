"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getAccessToken = getAccessToken;
exports.isKakaoTalkLoginAvailable = isKakaoTalkLoginAvailable;
exports.isLogined = isLogined;
exports.issueAccessTokenWithCodeWeb = issueAccessTokenWithCodeWeb;
exports.login = login;
exports.logout = logout;
exports.me = me;
exports.revokeScopes = revokeScopes;
exports.scopes = scopes;
exports.serviceTerms = serviceTerms;
exports.setAccessTokenWeb = setAccessTokenWeb;
exports.shippingAddresses = shippingAddresses;
exports.unlink = unlink;
var _reactNative = require("react-native");
var _jsUtil = require("@mj-studio/js-util");
var _core = require("@react-native-kakao/core");
const LINKING_ERROR = "The package '@react-native-kakao/user' doesn't seem to be linked. Make sure: \n\n" + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo Go\n';
const isTurboModuleEnabled = global.__turboModuleProxy != null;
const Module = isTurboModuleEnabled ? require('./spec/NativeKakaoUser').default : _reactNative.NativeModules.RNCKakaoUser;
const Native = Module ? Module : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }
});
function login({
  serviceTerms,
  prompts,
  useKakaoAccountLogin,
  scopes
} = {}) {
  (0, _core.kAssert)(!useKakaoAccountLogin ? !_jsUtil.is.notEmptyArray(prompts) && !_jsUtil.is.notEmptyArray(scopes) : true, '[login] `prompts` and `scopes` cannot be passed if useKakaoAccountLogin is false.');
  (0, _core.kAssert)(_jsUtil.is.notEmptyArray(scopes) ? !_jsUtil.is.notEmptyArray(prompts) && !_jsUtil.is.notEmptyArray(serviceTerms) : true, '[login] `scopes` cannot be passed with `prompts` or `serviceTerms`');
  return Native.login(serviceTerms ?? [], prompts ?? [], useKakaoAccountLogin ?? false, scopes ?? []);
}
function logout() {
  return Native.logout();
}
function unlink() {
  return Native.unlink();
}
function isLogined() {
  return Native.isLogined();
}
function isKakaoTalkLoginAvailable() {
  return Native.isKakaoTalkLoginAvailable();
}
function scopes(scopes) {
  return Native.scopes(scopes);
}
function revokeScopes(scopes) {
  return Native.revokeScopes(scopes);
}
function serviceTerms() {
  return Native.serviceTerms();
}
function shippingAddresses() {
  return Native.shippingAddresses();
}
function me() {
  return Native.me();
}
function getAccessToken() {
  return Native.getAccessToken();
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function setAccessTokenWeb(token) {}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function issueAccessTokenWithCodeWeb(params) {
  return {};
}
const KakaoUser = {
  login,
  logout,
  unlink,
  isLogined,
  isKakaoTalkLoginAvailable,
  scopes,
  revokeScopes,
  serviceTerms,
  shippingAddresses,
  me,
  getAccessToken,
  setAccessTokenWeb,
  issueAccessTokenWithCodeWeb
};
var _default = exports.default = KakaoUser;
//# sourceMappingURL=index.js.map