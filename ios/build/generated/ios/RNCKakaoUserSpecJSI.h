/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeKakaoUserCxxSpecJSI : public TurboModule {
protected:
  NativeKakaoUserCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value isKakaoTalkLoginAvailable(jsi::Runtime &rt) = 0;
  virtual jsi::Value login(jsi::Runtime &rt, jsi::Array serviceTerms, jsi::Array prompts, bool useKakaoAccountLogin, std::optional<jsi::Array> scopes) = 0;
  virtual jsi::Value logout(jsi::Runtime &rt) = 0;
  virtual jsi::Value unlink(jsi::Runtime &rt) = 0;
  virtual jsi::Value isLogined(jsi::Runtime &rt) = 0;
  virtual jsi::Value scopes(jsi::Runtime &rt, std::optional<jsi::Array> scopes) = 0;
  virtual jsi::Value revokeScopes(jsi::Runtime &rt, jsi::Array scopes) = 0;
  virtual jsi::Value serviceTerms(jsi::Runtime &rt) = 0;
  virtual jsi::Value shippingAddresses(jsi::Runtime &rt) = 0;
  virtual jsi::Value me(jsi::Runtime &rt) = 0;
  virtual jsi::Value getAccessToken(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeKakaoUserCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "RNCKakaoUser";

protected:
  NativeKakaoUserCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeKakaoUserCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeKakaoUserCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeKakaoUserCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value isKakaoTalkLoginAvailable(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::isKakaoTalkLoginAvailable) == 1,
          "Expected isKakaoTalkLoginAvailable(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::isKakaoTalkLoginAvailable, jsInvoker_, instance_);
    }
    jsi::Value login(jsi::Runtime &rt, jsi::Array serviceTerms, jsi::Array prompts, bool useKakaoAccountLogin, std::optional<jsi::Array> scopes) override {
      static_assert(
          bridging::getParameterCount(&T::login) == 5,
          "Expected login(...) to have 5 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::login, jsInvoker_, instance_, std::move(serviceTerms), std::move(prompts), std::move(useKakaoAccountLogin), std::move(scopes));
    }
    jsi::Value logout(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::logout) == 1,
          "Expected logout(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::logout, jsInvoker_, instance_);
    }
    jsi::Value unlink(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::unlink) == 1,
          "Expected unlink(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::unlink, jsInvoker_, instance_);
    }
    jsi::Value isLogined(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::isLogined) == 1,
          "Expected isLogined(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::isLogined, jsInvoker_, instance_);
    }
    jsi::Value scopes(jsi::Runtime &rt, std::optional<jsi::Array> scopes) override {
      static_assert(
          bridging::getParameterCount(&T::scopes) == 2,
          "Expected scopes(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::scopes, jsInvoker_, instance_, std::move(scopes));
    }
    jsi::Value revokeScopes(jsi::Runtime &rt, jsi::Array scopes) override {
      static_assert(
          bridging::getParameterCount(&T::revokeScopes) == 2,
          "Expected revokeScopes(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::revokeScopes, jsInvoker_, instance_, std::move(scopes));
    }
    jsi::Value serviceTerms(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::serviceTerms) == 1,
          "Expected serviceTerms(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::serviceTerms, jsInvoker_, instance_);
    }
    jsi::Value shippingAddresses(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::shippingAddresses) == 1,
          "Expected shippingAddresses(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::shippingAddresses, jsInvoker_, instance_);
    }
    jsi::Value me(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::me) == 1,
          "Expected me(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::me, jsInvoker_, instance_);
    }
    jsi::Value getAccessToken(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getAccessToken) == 1,
          "Expected getAccessToken(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getAccessToken, jsInvoker_, instance_);
    }

  private:
    friend class NativeKakaoUserCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
