/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNCKakaoUserSpec.h"


@implementation NativeKakaoUserSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_isKakaoTalkLoginAvailable(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "isKakaoTalkLoginAvailable", @selector(isKakaoTalkLoginAvailable:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_login(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "login", @selector(login:prompts:useKakaoAccountLogin:scopes:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_logout(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "logout", @selector(logout:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_unlink(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "unlink", @selector(unlink:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_isLogined(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "isLogined", @selector(isLogined:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_scopes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "scopes", @selector(scopes:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_revokeScopes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "revokeScopes", @selector(revokeScopes:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_serviceTerms(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "serviceTerms", @selector(serviceTerms:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_shippingAddresses(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "shippingAddresses", @selector(shippingAddresses:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_me(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "me", @selector(me:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeKakaoUserSpecJSI_getAccessToken(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getAccessToken", @selector(getAccessToken:reject:), args, count);
    }

  NativeKakaoUserSpecJSI::NativeKakaoUserSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["isKakaoTalkLoginAvailable"] = MethodMetadata {0, __hostFunction_NativeKakaoUserSpecJSI_isKakaoTalkLoginAvailable};
        
        
        methodMap_["login"] = MethodMetadata {4, __hostFunction_NativeKakaoUserSpecJSI_login};
        
        
        methodMap_["logout"] = MethodMetadata {0, __hostFunction_NativeKakaoUserSpecJSI_logout};
        
        
        methodMap_["unlink"] = MethodMetadata {0, __hostFunction_NativeKakaoUserSpecJSI_unlink};
        
        
        methodMap_["isLogined"] = MethodMetadata {0, __hostFunction_NativeKakaoUserSpecJSI_isLogined};
        
        
        methodMap_["scopes"] = MethodMetadata {1, __hostFunction_NativeKakaoUserSpecJSI_scopes};
        
        
        methodMap_["revokeScopes"] = MethodMetadata {1, __hostFunction_NativeKakaoUserSpecJSI_revokeScopes};
        
        
        methodMap_["serviceTerms"] = MethodMetadata {0, __hostFunction_NativeKakaoUserSpecJSI_serviceTerms};
        
        
        methodMap_["shippingAddresses"] = MethodMetadata {0, __hostFunction_NativeKakaoUserSpecJSI_shippingAddresses};
        
        
        methodMap_["me"] = MethodMetadata {0, __hostFunction_NativeKakaoUserSpecJSI_me};
        
        
        methodMap_["getAccessToken"] = MethodMetadata {0, __hostFunction_NativeKakaoUserSpecJSI_getAccessToken};
        
  }
} // namespace facebook::react
